apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot
  labels:
    app.kubernetes.io/name: chatbot
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: chatbot
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chatbot
        app.kubernetes.io/version: 1.0.0
    spec:
      containers:
        - name: chatbot
          image: localhost/chatbot
          imagePullPolicy: "IfNotPresent"
          resources:
          startupProbe:
            httpGet:
              port: httpd
            initialDelaySeconds: 5
            failureThreshold: 12
            periodSeconds: 5
          livenessProbe:
            httpGet:
              port: httpd
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 12
          ports:
            - name: httpd
              containerPort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: chatbot-service
spec:
  ports:
  - name: httpd-port
    port: 80
    protocol: TCP
    targetPort: 5000
  selector:
    app.kubernetes.io/name: chatbot
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chatbot-ingress
  annotations:
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "false"
    #cert-manager.io/cluster-issuer: "nameOfClusterIssuer"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - chatbot.localdev.me
    secretName: chatbot-localdev-me-tls
  rules:
  - host: chatbot.localdev.me
    http:
      paths:
      - backend:
          service:
            name: chatbot-service
            port:
              number: 80
        path: /
        pathType: Prefix
